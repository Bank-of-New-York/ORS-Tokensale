pragma solidity 0.4.23;

import "Ownable.sol";
import "ICOEngineInterface.sol";
import "KYCBase.sol";
import "./ORSToken.sol";


/// @title ORSTokenSale
/// @author Autogenerated from a Dia UML diagram
contract ORSTokenSale is Ownable, ICOEngineInterface, KYCBase {

    ORSToken public token;
    uint public totalTokens;
    uint public remainingTokens;
    uint public teamShare;
    uint public price;
    uint public startTime;
    uint public endTime;
    uint public weiRaised = 0;
    address public wallet;
    address public teamWallet = 0x0;
    address public eidooWalletSigner;
    bool public isFinalized = false;

    /// @dev Log entry on price changed
    /// @param newPrice A positive number
    event PriceChanged(uint newPrice);

    /// @dev Log entry on token purchased
    /// @param sender An Ethereum address
    /// @param buyer An Ethereum address
    /// @param value A positive number
    /// @param tokens A positive number
    event TokenPurchased(address sender, address buyer, uint value, uint tokens);

    /// @dev Log entry on buyer refunded
    /// @param sender An Ethereum address
    /// @param buyer An Ethereum address
    /// @param value A positive number
    event BuyerRefunded(address sender, address buyer, uint value);

    /// @dev Log entry on finalized
    event Finalized();

    /// @dev Constructor
    /// @param _token An ORSToken
    /// @param _totalTokens A positive number
    /// @param _teamShare A positive number
    /// @param _price A positive number
    /// @param _startTime A positive number
    /// @param _endTime A positive number
    /// @param _wallet An Ethereum address
    /// @param _kycSigners A list where each entry is an Ethereum address
    constructor(ORSToken _token, uint _totalTokens, uint _teamShare, uint _price, uint _startTime, uint _endTime, address _wallet, address[] _kycSigners) public KYCBase(_kycSigners) {
        require(IMPLEMENTATION);
    }

    /// @dev Set price
    /// @param _price A positive number
    function setPrice(uint _price) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Set team wallet
    /// @param _teamWallet An Ethereum address
    function setTeamWallet(address _teamWallet) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Distribute presale
    /// @param _investors A list where each entry is an Ethereum address
    /// @param _tokens A list where each entry is a positive number
    function distributePresale(address[] _investors, uint[] _tokens) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Started
    /// @return True or false
    function started() public view returns (bool) {
        require(IMPLEMENTATION);
    }

    /// @dev Ended
    /// @return True or false
    function ended() public view returns (bool) {
        require(IMPLEMENTATION);
    }

    /// @dev Finalize
    function finalize() public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Release tokens to
    /// @param buyer An Ethereum address
    /// @return True or false
    function releaseTokensTo(address buyer) internal returns (bool) {
        require(IMPLEMENTATION);
    }

}

