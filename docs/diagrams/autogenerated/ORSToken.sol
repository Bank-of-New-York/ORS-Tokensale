pragma solidity 0.4.23;

import "ERC827Token.sol";
import "CappedToken.sol";
import "PausableToken.sol";
import "StandardBurnableToken.sol";


/// @title ORSToken
/// @author Autogenerated from a Dia UML diagram
contract ORSToken is ERC827Token, CappedToken, PausableToken, StandardBurnableToken {

    string public name = "ORS Token";
    string public symbol = "ORS";
    uint8 public decimals = 18;

    /// @dev Constructor
    /// @param _cap A positive number
    constructor(uint _cap) public CappedToken(_cap) {
        require(IMPLEMENTATION);
    }

    /// @dev Approve and call
    /// @param _spender An Ethereum address
    /// @param _value A positive number
    /// @param _data An array of bytes
    /// @return True or false
    function approveAndCall(address _spender, uint _value, bytes _data) public payable whenNotPaused returns (bool) {
        require(IMPLEMENTATION);
    }

    /// @dev Increase approval and call
    /// @param _spender An Ethereum address
    /// @param _addedValue A positive number
    /// @param _data An array of bytes
    /// @return True or false
    function increaseApprovalAndCall(address _spender, uint _addedValue, bytes _data) public payable whenNotPaused returns (bool) {
        require(IMPLEMENTATION);
    }

    /// @dev Decrease approval and call
    /// @param _spender An Ethereum address
    /// @param _subtractedValue A positive number
    /// @param _data An array of bytes
    /// @return True or false
    function decreaseApprovalAndCall(address _spender, uint _subtractedValue, bytes _data) public payable whenNotPaused returns (bool) {
        require(IMPLEMENTATION);
    }

    /// @dev Transfer and call
    /// @param _to An Ethereum address
    /// @param _value A positive number
    /// @param _data An array of bytes
    /// @return True or false
    function transferAndCall(address _to, uint _value, bytes _data) public payable whenNotPaused returns (bool) {
        require(IMPLEMENTATION);
    }

    /// @dev Transfer from and call
    /// @param _from An Ethereum address
    /// @param _to An Ethereum address
    /// @param _value A positive number
    /// @param _data An array of bytes
    /// @return True or false
    function transferFromAndCall(address _from, address _to, uint _value, bytes _data) public payable whenNotPaused returns (bool) {
        require(IMPLEMENTATION);
    }

    /// @dev Burn
    /// @param _who An Ethereum address
    /// @param _value A positive number
    function _burn(address _who, uint _value) internal whenNotPaused {
        require(IMPLEMENTATION);
    }

}

